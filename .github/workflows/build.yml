name: Build Infinity APK (auto-detect)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: (Opcional) Sync con upstream
        run: |
          git remote add upstream https://github.com/Docile-Alligator/Infinity-For-Reddit.git || true
          git fetch upstream
          git checkout main
          git merge --ff-only upstream/main || true
          git push origin main || true

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Detectar rutas y versiones del proyecto
        id: detect
        run: |
          set -euo pipefail

          echo "== Mostrar estructura relevante =="
          ls -la
          [ -d app ] && ls -la app || true
          [ -f app/build.gradle ] && echo "[OK] app/build.gradle existe" || (echo "[!] Falta app/build.gradle" && exit 1)

          echo "== Buscar APIUtils.java en el repo =="
          API_FILE=$(git ls-files | grep -E 'APIUtils\.java$' || true)
          if [ -z "${API_FILE}" ]; then
            echo "[!] No se encontró APIUtils.java. Cambió de nombre o de carpeta."
            echo "    Intenta localizar manualmente con: git grep -n 'USER_AGENT' o 'infinity://localhost'"
            exit 1
          fi
          echo "API_FILE=${API_FILE}" >> $GITHUB_OUTPUT
          echo "API_FILE: ${API_FILE}"

          echo "== Extraer compileSdk y buildTools de app/build.gradle =="
          COMPILE_SDK=$(grep -E 'compileSdk\s*[=:]\s*[0-9]+' -m1 app/build.gradle | grep -oE '[0-9]+' || true)
          if [ -z "${COMPILE_SDK}" ]; then
            # Gradle KTS o formato distinto
            COMPILE_SDK=$(grep -E 'compileSdk\s*\(\s*[0-9]+' -m1 app/build.gradle | grep -oE '[0-9]+' || true)
          fi
          [ -z "${COMPILE_SDK}" ] && COMPILE_SDK=30   # fallback
          echo "COMPILE_SDK=${COMPILE_SDK}" >> $GITHUB_OUTPUT
          echo "compileSdk: ${COMPILE_SDK}"

          BUILD_TOOLS=$(grep -E 'buildToolsVersion' -m1 app/build.gradle | sed -E 's/.*"(.*)".*/\1/' || true)
          [ -z "${BUILD_TOOLS}" ] && BUILD_TOOLS="30.0.3"  # fallback
          echo "BUILD_TOOLS=${BUILD_TOOLS}" >> $GITHUB_OUTPUT
          echo "buildToolsVersion: ${BUILD_TOOLS}"

      - name: Instalar Android SDK requerido
        run: |
          set -euo pipefail
          ANDROID_HOME="$HOME/android-sdk"
          mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
          curl -sSL -o cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q cmdtools.zip -d "$ANDROID_HOME/cmdline-tools/latest"

          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_HOME" \
            "platforms;android-${{ steps.detect.outputs.COMPILE_SDK }}" \
            "build-tools;${{ steps.detect.outputs.BUILD_TOOLS }}" \
            "platform-tools"

          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Inyectar API/UA/Redirect + Keystore
        env:
          REDDIT_API_TOKEN: ${{ secrets.REDDIT_API_TOKEN }}
          REDDIT_USERNAME:  ${{ secrets.REDDIT_USERNAME }}
          REDIRECT_URI:     ${{ secrets.REDIRECT_URI }}
          KEYSTORE_BASE64:  ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASS:    ${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS:        ${{ secrets.KEY_ALIAS }}
          KEY_PASS:         ${{ secrets.KEY_PASS }}
        run: |
          set -euo pipefail

          API_FILE="${{ steps.detect.outputs.API_FILE }}"
          if [ ! -f "$API_FILE" ]; then
            echo "[!] No existe $API_FILE"; exit 1
          fi

          # Sustituciones (sin loguear secretos)
          sed -i "s/NOe2iKrPPzwscA/${REDDIT_API_TOKEN}/g" "$API_FILE"
          sed -i "s#infinity://localhost#${REDIRECT_URI}#g" "$API_FILE"
          UA="android:personal-app:0.0.1 (by /u/${REDDIT_USERNAME})"
          sed -i 's/public static final String USER_AGENT = ".*";/public static final String USER_AGENT = "'"${UA//\//\\/}"'";/' "$API_FILE"

          # Keystore desde secret base64
          echo "$KEYSTORE_BASE64" | base64 -d > "$GITHUB_WORKSPACE/Infinity.jks"

          # Insertar signingConfig en app/build.gradle si no existe
          GRADLE_FILE="app/build.gradle"
          if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
            awk '
              BEGIN{ inserted=0 }
              /buildTypes[[:space:]]*\{/ && inserted==0 {
                print "    signingConfigs {"
                print "        release {"
                print "            storeFile file(\"" ENVIRON["GITHUB_WORKSPACE"] "/Infinity.jks\")"
                print "            storePassword \"" ENVIRON["KEYSTORE_PASS"] "\""
                print "            keyAlias \"" ENVIRON["KEY_ALIAS"] "\""
                print "            keyPassword \"" ENVIRON["KEY_PASS"] "\""
                print "        }"
                print "    }"
                print
                inserted=1
                next
              }
              { print }
            ' "$GRADLE_FILE" > tmp.gradle && mv tmp.gradle "$GRADLE_FILE"
          fi

          if ! grep -q 'signingConfig signingConfigs.release' "$GRADLE_FILE"; then
            sed -i '0,/release[[:space:]]*{/{s/release[[:space:]]*{/release {\n            signingConfig signingConfigs.release/}' "$GRADLE_FILE"
          fi

      - name: Build release (con logs útiles)
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew --no-daemon updateLintBaseline || true
          ./gradlew --no-daemon assembleRelease --stacktrace --info

      - name: Subir APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Infinity-Release-APK
          path: app/build/outputs/apk/release/*.apk
